//  This file was generated by LevelHelper
//  http://www.levelhelper.org
//
//  LevelHelperLoader.mm
//  Created by Bogdan Vladu
//  Copyright 2011 Bogdan Vladu. All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//
//  This software is provided 'as-is', without any express or implied
//  warranty.  In no event will the authors be held liable for any damages
//  arising from the use of this software.
//  Permission is granted to anyone to use this software for any purpose,
//  including commercial applications, and to alter it and redistribute it
//  freely, subject to the following restrictions:
//  The origin of this software must not be misrepresented; you must not
//  claim that you wrote the original software. If you use this software
//  in a product, an acknowledgment in the product documentation would be
//  appreciated but is not required.
//  Altered source versions must be plainly marked as such, and must not be
//  misrepresented as being the original software.
//  This notice may not be removed or altered from any source distribution.
//  By "software" the author refers to this code file and not the application 
//  that was used to generate this file.
//
////////////////////////////////////////////////////////////////////////////////

#import "LHPathExt.h"
#import "LHPathNode.h"

@implementation LevelHelperLoader (PATH_EXTENSION)
////////////////////////////////////////////////////////////////////////////////
-(void) pausePathMovement:(bool)pauseStatus ofSprite:(LHSprite*)ccsprite
{
    if(ccsprite == nil)
        return;    
    
    LHPathNode* node = [ccsprite pathNode];
    if(nil != node)
    {
        [node setPaused:pauseStatus];
    }
}
////////////////////////////////////////////////////////////////////////////////
-(void) cancelPathMovementForSprite:(LHSprite*)sprite{
    
    if(sprite == nil)
        return;    
    
    LHPathNode* node = [sprite pathNode];
    if(nil != node)
    {
        [node removeFromParentAndCleanup:YES];
    }
}

////////////////////////////////////////////////////////////////////////////////
-(void) registerNotifierOnPathEndPoints:(id)obj selector:(SEL)sel forSprite:(LHSprite*)spr{
    
    if(nil == spr)
        return;
    
    LHPathNode* node = [spr pathNode];
    
    if(nil == node)
        return;
    
    [node setPathNotifierObject:obj];
    [node setPathNotifierSelector:sel];
}
////////////////////////////////////////////////////////////////////////////////
-(void) moveSpriteWithUniqueName:(NSString*)sprName onPathWithUniqueName:(NSString*)uniqueName 
                           speed:(float)pathSpeed 
                 startAtEndPoint:(bool)startAtEndPoint
                        isCyclic:(bool)isCyclic
               restartAtOtherEnd:(bool)restartOtherEnd
                 axisOrientation:(int)axis
                           flipX:(bool)flipx
                           flipY:(bool)flipy
                   deltaMovement:(bool)dMove
{
    LHSprite* spr = [self spriteWithUniqueName:sprName];
    
    [spr moveOnPathWithUniqueName:uniqueName 
                            speed:pathSpeed 
                  startAtEndPoint:startAtEndPoint
                         isCyclic:isCyclic 
                restartAtOtherEnd:restartOtherEnd
                  axisOrientation:axis 
                            flipX:flipx 
                            flipY:flipy 
                    deltaMovement:dMove 
                   endObserverObj:pathNotifierId 
                   endObserverSel:pathNotifierSel];
    
//    [self moveSprite:spr onPathWithUniqueName:uniqueName 
//               speed:pathSpeed 
//     startAtEndPoint:startAtEndPoint 
//            isCyclic:isCyclic 
//   restartAtOtherEnd:restartOtherEnd
//     axisOrientation:(int)axis
//               flipX:flipx
//               flipY:flipy
//       deltaMovement:dMove];
}
////////////////////////////////////////////////////////////////////////////////
-(void) pausePathMovement:(bool)pauseStatus ofSpriteWithUniqueName:(NSString*)sprName
{
    LHSprite* spr = [self spriteWithUniqueName:sprName];
    
    [spr pausePathMovement:pauseStatus];
//    [self pausePathMovement:pauseStatus ofSprite:spr];    
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
-(void) cancelPathMovementForSpriteWithUniqueName:(NSString*)name{
    
    if(nil == name)
        return;
    
    LHSprite* spr = [self spriteWithUniqueName:name];
    
    [spr cancelPathMovement];
//    [self cancelPathMovementForSprite:spr];
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
-(void) registerNotifierOnPathEndPoints:(id)obj selector:(SEL)sel forSpriteWithUniqueName:(NSString*)name
{
    LHSprite* spr = [self spriteWithUniqueName:name];
    
    if(nil == spr)
        return;
    
    LHPathNode* node = [spr pathNode];
    
    if(nil == node)
        return;
    
    [node setPathNotifierObject:obj];
    [node setPathNotifierSelector:sel];

//    [self registerNotifierOnPathEndPoints:obj selector:sel forSprite:spr];
}
////////////////////////////////////////////////////////////////////////////////
@end
