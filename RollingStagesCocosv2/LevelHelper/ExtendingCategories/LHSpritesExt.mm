//  This file was generated by LevelHelper
//  http://www.levelhelper.org
//
//  LevelHelperLoader.mm
//  Created by Bogdan Vladu
//  Copyright 2011 Bogdan Vladu. All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//
//  This software is provided 'as-is', without any express or implied
//  warranty.  In no event will the authors be held liable for any damages
//  arising from the use of this software.
//  Permission is granted to anyone to use this software for any purpose,
//  including commercial applications, and to alter it and redistribute it
//  freely, subject to the following restrictions:
//  The origin of this software must not be misrepresented; you must not
//  claim that you wrote the original software. If you use this software
//  in a product, an acknowledgment in the product documentation would be
//  appreciated but is not required.
//  Altered source versions must be plainly marked as such, and must not be
//  misrepresented as being the original software.
//  This notice may not be removed or altered from any source distribution.
//  By "software" the author refers to this code file and not the application 
//  that was used to generate this file.
//
////////////////////////////////////////////////////////////////////////////////

#import "LHSpritesExt.h"
#import "LHSettings.h"
#import "LHSprite.h"
#import "LHBezierNode.h"
@implementation LevelHelperLoader (SPRITE_INFO_EXTENSION)

+(NSString*) uniqueNameForSprite:(LHSprite*)sprite
{
    if(nil == sprite)
        return nil;
    
    return [sprite uniqueName];
}
////////////////////////////////////////////////////////////////////////////////
+(NSString*) uniqueNameForBody:(b2Body*)body
{
#ifndef LH_ARC_ENABLED
    id spr = (id)body->GetUserData();
#else
    id spr = (__bridge id)body->GetUserData();
#endif
    
    if([LHSprite isLHSprite:spr])
        return [spr uniqueName];
    
    if([LHBezierNode isLHBezierNode:spr])
        return [spr uniqueName];
    
    return nil;
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
+(void) setCustomValue:(id)value withKey:(NSString*)key onSprite:(LHSprite*)sprite
{
    if(nil == sprite)
        return;
    
    [sprite setCustomValue:value withKey:key];
}
////////////////////////////////////////////////////////////////////////////////
+(id) customValueWithKey:(NSString*)key forSprite:(LHSprite*)sprite
{
    if(nil == sprite)
        return nil;
    
    return [sprite customValueWithKey:key];
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
+(bool) isLHSprite:(id)object{
    
    if([object isKindOfClass:[LHSprite class]]){
        return true;
    }

    return false;
}
////////////////////////////////////////////////////////////////////////////////
+(bool) isLHBezierNode:(id)object{
    if([object isKindOfClass:[LHBezierNode class]]){
        return true;
    }
    return false;
}
////////////////////////////////////////////////////////////////////////////////
+(int) tagForSprite:(CCNode*)sprite
{
    if(nil != sprite)
        return [sprite tag];
    
    return -1;
}
////////////////////////////////////////////////////////////////////////////////
+(int) tagForBody:(b2Body*)body
{
    if(0 != body)
    {
#ifndef LH_ARC_ENABLED
        CCNode* spr = (CCNode*)body->GetUserData();
#else
        CCNode* spr = (__bridge CCNode*)body->GetUserData();
#endif
        if(nil != spr)
        {
            return [spr tag];
        }
    }
    
    return -1;
}
////////////////////////////////////////////////////////////////////////////////
+(b2Body*) bodyForSprite:(LHSprite*)sprite
{
    if(nil != sprite)
    {
        return [sprite body];
    }
    
    return 0;
}
////////////////////////////////////////////////////////////////////////////////
+(LHSprite*) spriteForBody:(b2Body*)body
{    
    if(0 != body)
    {
        #ifndef LH_ARC_ENABLED
        return (LHSprite*)body->GetUserData();
        #else
        return (__bridge LHSprite*)body->GetUserData();
        #endif
    }
    
    return nil;
}
////////////////////////////////////////////////////////////////////////////////
-(b2Body*) bodyWithUniqueName:(NSString*)name
{
    LHSprite* spr = [spritesInLevel objectForKey:name];
    
    if(nil == spr)
        return 0;
    
    return [spr body];
}
////////////////////////////////////////////////////////////////////////////////
-(NSArray*) bodiesWithTag:(enum LevelHelper_TAG)tag
{
#ifndef LH_ARC_ENABLED
	NSMutableArray* array = [[[NSMutableArray alloc] init] autorelease];
#else
    NSMutableArray* array = [[NSMutableArray alloc] init];
#endif
	NSArray *keys = [spritesInLevel allKeys];
    
	for(NSString* key in keys)
	{
        LHSprite* spr = [spritesInLevel objectForKey:key];
        
        if(nil != spr && [spr tag] == (int)tag)
        {
            b2Body* body = [spr body];
            
            if(0 != body)
            {
                [array addObject:[NSValue valueWithPointer:body]];    
            }
        }
	}
	
	return array;
}
////////////////////////////////////////////////////////////////////////////////
-(bool) removeSpriteWithUniqueName:(NSString*)name
{
	LHSprite* ccsprite = [spritesInLevel objectForKey:name];
    return [self removeSprite:ccsprite];
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
-(bool) removeBodyWithUniqueName:(NSString*)name
{	
    LHSprite* spr = [self spriteWithUniqueName:name];
    return [self removeSprite:spr];
}
////////////////////////////////////////////////////////////////////////////////
-(bool) removeBody:(b2Body*)body
{	
	if(0 == body)
		return false;
	
#ifndef LH_ARC_ENABLED
    id ccsprite = (id)body->GetUserData();
#else
    id ccsprite = (__bridge id)body->GetUserData();
#endif
    if(nil != ccsprite)
    {
        if([ccsprite isKindOfClass:[LHSprite class]]){
            #ifndef LH_ARC_ENABLED
            LHSprite *ccsprite = (LHSprite*)body->GetUserData();
            #else
            LHSprite *ccsprite = (__bridge LHSprite*)body->GetUserData();
            #endif
            return [self removeSprite:ccsprite];
        }
    else if([ccsprite isKindOfClass:[CCSprite class]]){
            //remove it old fashion way. this is not a sprite created with LevelHelper
            [ccsprite removeFromParentAndCleanup:YES];
        }
    }
    
    if(NULL != body){
        b2World* _world = body->GetWorld();
        if(0 != _world){
            _world->DestroyBody(body);
            body = NULL;
            return true;
        }
    }
    return false;
}
////////////////////////////////////////////////////////////////////////////////
-(bool) removeBodiesWithTag:(enum LevelHelper_TAG)tag
{
	NSArray *keys = [spritesInLevel allKeys];
	
    if(nil == keys)
        return false;
    
	for(NSString* key in keys)
	{
        LHSprite* spr = [spritesInLevel objectForKey:key];
        if(nil != spr && [spr tag] == (int)tag)
        {
            [self removeSprite:spr];
        }
	}
	return true;		
}
////////////////////////////////////////////////////////////////////////////////
-(bool) removeAllBodies
{
    return [self removeAllSprites];
}
////////////////////////////////////////////////////////////////////////////////
@end
