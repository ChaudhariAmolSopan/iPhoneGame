//  This file was generated by LevelHelper
//  http://www.levelhelper.org
//
//  LevelHelperLoader.mm
//  Created by Bogdan Vladu
//  Copyright 2011 Bogdan Vladu. All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//
//  This software is provided 'as-is', without any express or implied
//  warranty.  In no event will the authors be held liable for any damages
//  arising from the use of this software.
//  Permission is granted to anyone to use this software for any purpose,
//  including commercial applications, and to alter it and redistribute it
//  freely, subject to the following restrictions:
//  The origin of this software must not be misrepresented; you must not
//  claim that you wrote the original software. If you use this software
//  in a product, an acknowledgment in the product documentation would be
//  appreciated but is not required.
//  Altered source versions must be plainly marked as such, and must not be
//  misrepresented as being the original software.
//  This notice may not be removed or altered from any source distribution.
//  By "software" the author refers to this code file and not the application 
//  that was used to generate this file.
//
////////////////////////////////////////////////////////////////////////////////
#import "LHBatch.h"
#import "LHSettings.h"
#import "LevelHelperLoader.h"
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
@interface LHBatch (Private)

@end
////////////////////////////////////////////////////////////////////////////////
@implementation LHBatch
@synthesize z;
////////////////////////////////////////////////////////////////////////////////
-(void) dealloc{		
    
   // NSLog(@"LH Batch Dealloc");

    if(nil != batchNode)
    {
        [batchNode removeFromParentAndCleanup:YES];
    }
    
#ifndef LH_ARC_ENABLED
    [uniqueName release];
	[super dealloc];
#endif
}
////////////////////////////////////////////////////////////////////////////////
-(id) initWithUniqueName:(NSString *)name{
    self = [super init];
    if (self != nil)
    {
        uniqueName = [[NSMutableString alloc] initWithString:name];
        batchNode = nil;
        z = 0;
    }
    return self;
}
////////////////////////////////////////////////////////////////////////////////
+(id) batchWithUniqueName:(NSString*)name{
#ifndef LH_ARC_ENABLED
    return [[[self alloc] initWithUniqueName:name] autorelease];
#else
    return [[self alloc] initWithUniqueName:name];
#endif
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
-(void) setUniqueName:(NSString*)name{
    NSAssert(name!=nil, @"UniqueName must not be nil");

    [uniqueName setString:name];
}
-(NSString*)uniqueName{
    return uniqueName;   
}
////////////////////////////////////////////////////////////////////////////////
-(void) setSpriteBatchNode:(CCSpriteBatchNode*)node{
    batchNode = node;
}
-(CCSpriteBatchNode*)spriteBatchNode{
    return batchNode;
}
////////////////////////////////////////////////////////////////////////////////
@end
