//  This file was generated by LevelHelper
//  http://www.levelhelper.org
//
//  LevelHelperLoader.h
//  Created by Bogdan Vladu
//  Copyright 2011 Bogdan Vladu. All rights reserved.
//
////////////////////////////////////////////////////////////////////////////////
//
//  This software is provided 'as-is', without any express or implied
//  warranty.  In no event will the authors be held liable for any damages
//  arising from the use of this software.
//  Permission is granted to anyone to use this software for any purpose,
//  including commercial applications, and to alter it and redistribute it
//  freely, subject to the following restrictions:
//  The origin of this software must not be misrepresented; you must not
//  claim that you wrote the original software. If you use this software
//  in a product, an acknowledgment in the product documentation would be
//  appreciated but is not required.
//  Altered source versions must be plainly marked as such, and must not be
//  misrepresented as being the original software.
//  This notice may not be removed or altered from any source distribution.
//  By "software" the author refers to this code file and not the application 
//  that was used to generate this file.
//
////////////////////////////////////////////////////////////////////////////////

#import <Foundation/Foundation.h>
#import "cocos2d.h"
#include "Box2D.h"

#ifdef __IPHONE_OS_VERSION_MAX_ALLOWED
#import <UIKit/UIKit.h>					// Needed for UIAccelerometerDelegate
#import "CCTouchDelegateProtocol.h"		// Touches only supported on iOS
#elif defined(__MAC_OS_X_VERSION_MAX_ALLOWED)
#import "Platforms/Mac/CCEventDispatcher.h"
#endif

@class LHPathNode;
@class LHAnimationNode;
@class LevelHelperLoader;
@class LHParallaxNode;
@class LHSprite;
@class LHBezierNode;
@class LHObserverPair;
@class LHJoint;
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

#ifdef __IPHONE_OS_VERSION_MAX_ALLOWED
@interface LHSprite : CCSprite <CCStandardTouchDelegate, CCTargetedTouchDelegate>
#elif defined(__MAC_OS_X_VERSION_MAX_ALLOWED)
@interface LHSprite : CCSprite <CCMouseEventDelegate>
#endif
{
	b2Body* body; //week ptr
    NSMutableString* uniqueName;
    NSMutableDictionary* customUserValues;
    
    NSString* imageFile;
    CGRect originalRect;
    
    int currentFrame;
    LHAnimationNode* animation;
    LHPathNode* pathNode;
    
    LevelHelperLoader* parentLoader;
    
    CGSize realScale; //used for the joints in case you create a level with SD graphics using ipad template
    
    LHParallaxNode* parallaxFollowingThisSprite;
    LHParallaxNode* spriteIsInParallax;
    
    //this also serves as left mouse events on mac
    LHObserverPair* touchBeginObserver;
    LHObserverPair* touchMovedObserver;
    LHObserverPair* touchEndedObserver;
    
    LHObserverPair* tagTouchBeginObserver;
    LHObserverPair* tagTouchMovedObserver;
    LHObserverPair* tagTouchEndedObserver;
    
    bool swallowTouches;
    
#ifdef __MAC_OS_X_VERSION_MAX_ALLOWED
    LHObserverPair* rightMouseDownObserver;
    LHObserverPair* rightMouseDraggedObserver;
    LHObserverPair* rightMouseUpObserver;
    
    LHObserverPair* tagRightMouseDownObserver;
    LHObserverPair* tagRightMouseDraggedObserver;
    LHObserverPair* tagRightMouseUpObserver;
    bool mouseDownStarted;//keeps track if mouse down was started on the sprite
    bool r_mouseDownStarted;
#endif
    
    bool usesOverloadedTransformations; //false uses native Cocos2d setPosition setRotation - true uses LH (may cause problems in certain game logics)
    
    bool usePhysicsForTouches;
}
@property bool usesOverloadedTransformations;
@property (readwrite) CGSize realScale;
@property (readwrite) bool swallowTouches;

-(id) initSprite; //bad CCSprite design - causes recursion - so init is renamed

-(void) postInitialization;//overwrite this in your custom sprite if you want to do special logic after initialization, like modifying box2d body.
//ALL INITIALIZERS WERE COMMENTED BECAUSE OF RECURSION

+(id) spriteWithFile:(NSString*)filename rect:(CGRect)rect;
+(id) spriteWithBatchNode:(CCSpriteBatchNode*)batchNode rect:(CGRect)rect;

-(id) initWithFile:(NSString*)filename rect:(CGRect)rect;
-(id) initWithBatchNode:(CCSpriteBatchNode*)batchNode rect:(CGRect)rect;
////////////////////////////////////////////////////////////////////////////////

-(void)removeSelf; //use this to completely remove a sprite from the game

//INFO METHODS
//------------------------------------------------------------------------------
-(void) setUniqueName:(NSString*)name;
-(NSString*)uniqueName;

-(void) setBody:(b2Body*)body;
-(b2Body*)body;
-(bool) removeBodyFromWorld;

-(void) setCustomValue:(id)value withKey:(NSString*)key;
-(id) customValueWithKey:(NSString*)key;


//methods used by the cutting engine
-(NSString*)imageFile;
-(void)setImageFile:(NSString*)img;

-(CGRect)originalRect;
-(void)setOriginalRect:(CGRect)rect;

//CUTTING METHODS
////------------------------------------------------------------------------------
////returns array of new sprites - current sprite will be removed
//-(NSArray*)splitAtPoint:(CGPoint)point;
//
////will triangulate all fixtures based on your decision.
////all bodies that have mass smaller then your decision will not be created - improves performance
////usually mass smaller then 0.04 - 0.06 can be ignore - play with this value until it suit your needs
//-(NSArray*)splitAtPoint:(CGPoint)point 
// triangulateAllFixtures:(bool)triangulate 
//      ignoreSmallerMass:(float)mass;



//TRANSFORMATION METHODS
//------------------------------------------------------------------------------
//The following method will transform the physic body also - if any
-(void) transformPosition:(CGPoint)pos;
-(CGPoint)position;

-(void)transformRotation:(float)rot;
-(float)rotation;


//ANIMATION METHODS
//------------------------------------------------------------------------------
-(void) startAnimationNamed:(NSString*)animName 
             endObserverObj:(id)obj  
             endObserverSel:(SEL)sel 
  shouldObserverLoopForever:(bool)observeLooping;

-(void) startAnimationNamed:(NSString*)animName 
          startingFromFrame:(int)startFrame //frameNo should be from 0 to numberOfFrames
             endObserverObj:(id)obj  
             endObserverSel:(SEL)sel
  shouldObserverLoopForever:(bool)observeLooping;

-(void) startAnimationNamed:(NSString*)animName 
          startingFromFrame:(int)startFrame; //frameNo should be from 0 to numberOfFrames

-(void) startAnimationNamed:(NSString*)animName;

//does not start the animation - just changed the texture. 
//use this when you want to use nextFrame / prevFrame methods
-(void) prepareAnimationNamed:(NSString*)animName; 

-(void) stopAnimation;

-(void) setAnimation:(LHAnimationNode*)anim; //use wisely e.g. don't use it
-(LHAnimationNode*)animation;
-(NSString*) animationName;

-(int) numberOfFrames;
-(void) setFrame:(int)frmNo;
-(int) currentFrame;

-(void) nextFrame;
-(void) prevFrame;

-(void) nextFrameAndRepeat; //will loop when it reaches end
-(void) prevFrameAndRepeat; //will loop when it reaches start

-(bool) isAtLastFrame;

//JOINTS LIST
//--------------------------------------------------------------------------
//returns the LHJoint* objects attached to the body of this sprite
//from the LHJoint you can take back the box2d joint
-(NSArray*) jointList; //array contains LHJoint* objects
-(LHJoint*) jointWithUniqueName:(NSString*)name;

//remove all joints attached to this sprite
//methods may not remove the joints if body is in contact 
//but rather is markes the joints for removal 
//so make sure you call removeMarkesJoints from LevelHelperLoader.h in your tick method
-(bool) removeAllAttachedJoints;
-(bool) removeJoint:(LHJoint*)jt;


//PATH METHODS
//------------------------------------------------------------------------------
-(void) moveOnPathWithUniqueName:(NSString*)pathName 
                           speed:(float)pathSpeed 
                 startAtEndPoint:(bool)startAtEndPoint
                        isCyclic:(bool)isCyclic
               restartAtOtherEnd:(bool)restartOtherEnd
                 axisOrientation:(int)axis
                           flipX:(bool)flipx
                           flipY:(bool)flipy
                   deltaMovement:(bool)dMove//describe path movement without setting the sprite position on the actual points on the path
                  endObserverObj:(id)obj  //pass nil if you dont want an observer
                  endObserverSel:(SEL)sel;//pass nil 

-(void) cancelPathMovement;
-(void) pausePathMovement:(bool)pauseStatus;

-(void) setPathSpeed:(float)value;
-(float)pathSpeed;

-(LHPathNode*)pathNode;
//------------------------------------------------------------------------------

//TOUCH METHODS
//------------------------------------------------------------------------------
//If NO_PHYSICS type - touch is detected inside the sprite quad, meaning touch can be
//detected on the non visible part of the sprite also.

//If sprite has physics - touch is detected on the body of the sprite, meaning touch will be detected
//based on the shape of the body - useful when you dont want to detect touch on the non visible part
//of the sprite
-(bool)isTouchedAtPoint:(CGPoint)point;

//if you dont want to use the physic shape to test for touches but only want to use the rect of the sprite
//call this method with false
-(void)setUsePhysicsForTouches:(bool)val;

//Note: in order to make porting from ios to mac easy, left mouse events from mac are equivalent with touch events on ios

//selector needs to have this signature -(void) touchXXX:(LHTouchInfo*)info
//info will have all information regarding the touch (see API Documentation or top of this file)
//for generic touch on sprites with tag use the observers from LevelHelperLoader
-(void)registerTouchBeginObserver:(id)observer selector:(SEL)selector;
-(void)registerTouchMovedObserver:(id)observer selector:(SEL)selector;
-(void)registerTouchEndedObserver:(id)observer selector:(SEL)selector;
-(void)removeTouchObserver;


#ifdef __MAC_OS_X_VERSION_MAX_ALLOWED

//for left mouse events use the touch observers from above 
-(void)registerRightMouseDownObserver:(id)observer selector:(SEL)selector;
-(void)registerRightMouseDraggedObserver:(id)observer selector:(SEL)selector;
-(void)registerRightMouseUpObserver:(id)observer selector:(SEL)selector;
#endif

//CLASS METHODS
//------------------------------------------------------------------------------
+(NSString*) uniqueNameForBody:(b2Body*)body;
+(LHSprite*) spriteForBody:(b2Body*)body;
+(int) tagForBody:(b2Body*)body;
+(bool) isLHSprite:(id)object;

//SORTING
//------------------------------------------------------------------------------
- (NSComparisonResult)sortAscending:(LHSprite *)other;
- (NSComparisonResult)sortDescending:(LHSprite *)other;

//COLLISION FILTERING
//------------------------------------------------------------------------------
-(void)setCollisionFilterCategory:(int)category;
-(void)setCollisionFilterMask:(int)mask;
-(void)setCollisionFilterGroup:(int)group;

//TYPE CONVERSION
//------------------------------------------------------------------------------
-(void)makeDynamic;
-(void)makeStatic;
-(void)makeKinematic;


@end	
